import RPi.GPIO as GPIO
import time

# GPIO pin assignments
DB_PINS = [16, 20, 21, 26, 19, 13, 6, 5]
WR_PIN = 17
CD_PIN = 27
RST_PIN = 22

# LCD Command Codes (from your instruction table)
LCD_SETCURSORPOINTER = 0x21
LCD_SETOFFSETREGISTER = 0x22
LCD_SETADDRESSPOINTER = 0x24
LCD_SETTEXTHOMEADDRESS = 0x40
LCD_SETTEXTAREA = 0x41
LCD_SETGRAPHICHOMEADDRESS = 0x42
LCD_SETGRAPHICAREA = 0x43
LCD_MODESET = 0x80
LCD_DISPLAYMODE = 0x90
LCD_CURSORPATTERNSELECT = 0xA0
LCD_DATAWRITEINCREMENT = 0xC0
LCD_DATAREADINCREMENT = 0xC1
LCD_SCREENPEEK = 0xE0
LCD_SCREENCOPY = 0xE8
LCD_BITRESET = 0xF0
LCD_BITSET = 0xF8

# Initialize GPIO pins
GPIO.setmode(GPIO.BCM)
GPIO.setup(DB_PINS, GPIO.OUT)
GPIO.setup(WR_PIN, GPIO.OUT)
GPIO.setup(CD_PIN, GPIO.OUT)
GPIO.setup(RST_PIN, GPIO.OUT)

def send_command(command):
    """Send a command to the LCD."""
    GPIO.output(CD_PIN, GPIO.LOW)  # Command mode
    GPIO.output(WR_PIN, GPIO.LOW)  # Enable writing

    for i in range(8):
        GPIO.output(DB_PINS[i], (command >> i) & 0x01)

    GPIO.output(WR_PIN, GPIO.HIGH)  # Disable writing
    time.sleep(0.001)  # Small delay after sending the command

def send_data(data):
    """Send data to the LCD."""
    GPIO.output(CD_PIN, GPIO.HIGH)  # Data mode
    GPIO.output(WR_PIN, GPIO.LOW)   # Enable writing

    for i in range(8):
        GPIO.output(DB_PINS[i], (data >> i) & 0x01)

    GPIO.output(WR_PIN, GPIO.HIGH)  # Disable writing
    time.sleep(0.001)  # Small delay after sending the data

def reset_lcd():
    """Reset the LCD."""
    GPIO.output(RST_PIN, GPIO.LOW)
    time.sleep(0.1)
    GPIO.output(RST_PIN, GPIO.HIGH)
    time.sleep(0.1)

def initialize_lcd():
    """Initialize the LCD with default settings."""
    reset_lcd()
    time.sleep(0.1)  # Delay to ensure the LCD is fully reset

    print("Setting text home address...")
    send_command(LCD_SETTEXTHOMEADDRESS)
    send_data(0x00)
    send_data(0x00)
    time.sleep(0.05)

    print("Setting text area...")
    send_command(LCD_SETTEXTAREA)
    send_data(0x10)
    send_data(0x00)
    time.sleep(0.05)

    print("Setting graphic home address...")
    send_command(LCD_SETGRAPHICHOMEADDRESS)
    send_data(0x00)
    send_data(0x10)
    time.sleep(0.05)

    print("Setting graphic area...")
    send_command(LCD_SETGRAPHICAREA)
    send_data(0x10)
    send_data(0x00)
    time.sleep(0.05)

    print("Setting display mode...")
    send_command(LCD_DISPLAYMODE)
    send_data(0x0E)  # Cursor blink on, Cursor display on, Text on, Graphic off
    time.sleep(0.05)

    print("Setting cursor pattern to 2-line cursor...")
    send_command(0xA1)  # 2-line cursor pattern
    time.sleep(0.05)

    print("LCD initialization complete.")

def set_cursor(x, y):
    """Set the cursor position."""
    address = x + (y * 256)
    print(f"Setting cursor position to x: {x}, y: {y} (Address: {address})")
    send_command(LCD_SETCURSORPOINTER)
    send_data(address & 0xFF)
    send_data((address >> 8) & 0xFF)
    time.sleep(0.01)  # Small delay to ensure cursor is set


def write_text(text):
    """Write text to the LCD."""
    for char in text:
        print(f"Writing character: {char} (ASCII: {ord(char)})")
        send_data(ord(char) - 32)  # Assuming ASCII characters start at 0x20
        time.sleep(0.01)  # Small delay between characters

def clear_screen():
    """Clear the screen."""
    set_cursor(0, 0)
    for _ in range(256):  # Assuming a screen size that needs 256 characters
        send_data(0x00)
        time.sleep(0.01)  # Small delay between clearing characters

def test_lcd_command():
    """Test sending a basic command to the LCD."""
    send_command(LCD_DISPLAYMODE)
    send_data(0x00)  # This should turn off the display

    time.sleep(2)  # Wait for 2 seconds to observe

    send_data(0x04)  # This should turn on the text display only

try:
    initialize_lcd()
    test_lcd_command()
    clear_screen()
    set_cursor(0, 0)
    write_text("Hello, World!")
finally:
    GPIO.cleanup()

